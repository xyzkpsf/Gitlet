Gitlet Design Document
----------------------


Classes and Data Structures
---------------------------
Blobs: 
A class used to hold the content and names of a file, which helps us to track whether a file is changed between different commits / branches.

** Fields ** :
1. String _fileName : The String of the file name.
2. byte[] _content : The byte array to hold content.
3. String _contentString : The String to hold content.
4. String _sha1 : The Sha-1 String to hold hashcode of the whole blob. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Commit:
A class used to hold all the necessary information about a commit. Once a commit was made, it could never be changed. Every individual commit record all the files that it was tracking, stored by the from of Blobs.

** Fields ** :
1. ZonedDateTime _time : The time when this commit was created.
2. String _timeS : Time but in String format.
3. String _parentId : The Sha-1 string of the parent of this commit.
4. String _parentId2 : The parent(secondary) of this commit(from merge), null by defalut.
5. boolean _fromMerge : The boolean records whether this is from a merge. 
6. String _sha : The String holds the sha-1 of this commit, generated by name, parent(S), content and time.
7. String _message : Commit message.
8. String _branchName : The String holds the branch made started by this commit.
9. HashMap<String, Blobs> _allFiles : The Hashmap stores all the file on this commit, saved by file name.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Main:
The driver class for the wholed gitlet program, which is used to read and write the content bewteen different version, and also identify and record valid command which is used to implement the version control between different file(S) and time.


** Fields ** :
1. static final List<String> VALIDCOMMAND = A list of all the valid commands.
2. static final List<String> ONEOPERAND = A list of all valid commands that require only one operand.
3. static final List<String> TWOOPERAND = A list of all valid commands that require more than one operand.
4. static Repo repo : The unique repo object.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Repo:
The mainframe of Gitlet, which includes all the commands and methods that used to perform the version control. Every command received from Main class will be inplemented on Repo class. 


** Fields ** :
1. String _head : A string storing the branch name of the Head.
2. String _parentId2 : A String of the second parentId of commit if merge. 
3. boolean _isMerge : Flag to indicate a merge.
4. HashMap<String, Commit> _allCommit : A hash-map stores all the commits with its sha-1 code. 
5. HashMap<String, String> _allBranch : A hash-map stores all the branch's head with its sha-1 code.
6. HashMap<String, Blobs> _allStaging : A hash-map stores all the files in staged with its file name.
7. List<String> _allUntrack : List contains all the untracked files before the next commit.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Algorithms
----------

Blobs class:
The algorithms is straightforward that every time the program encouther an action about files, shch as creating, saving, comparing, then the Blobs object will be created/retrived by this action, and perform the according action. Mostly, its action will be read and store the content from a file.


Commit class:
Commit class maintain all the information about a commit. When the .gitlet/ directory was created, a initial commit will be created. Then each new commit will be created based on the previous one, copying and updating the staged file(S) from the hashmap of its parent, based on its own staging area and untracked files list. A sepcial case will be a merge, which resulted in a second parent, however, its formation is still largly based on the first parent, but changing the staging and untracked files according to the second parent.

Main class:
As a driver class, it does't have complicated algrithms. The most important part of this calss is to create two different final string list that contains all the valid commands. Then using it to filter a valid command based on the command name and operand(S). Then once it receives a valid command, it just pass to its Repo object, and the Repo object will call the according mehtod.

Repo class:
It contains all the method that used to perform version control. It manipulates its instance variables according to the command, interacts with the actual working directiroy. It will retrieves data form a given Commit/branch accordingly, to modify the file(s) on working directory and form a new commit, but never modify a perivous one.
There are three hashmaps that are the core of the Repo. Each of them storing the according Object(Commit, String and Blobs). 


Persistence
-----------

The key to maintain the Persistence between different timing is the Serializated file that storing the information of the Repo object. Every time the Repo Object was being modified, its changed will be writen into the Repo file storing on the .gitlet/. Also, the other two object, Blobs and Commits are also Serializated. Everytime we created one of this object, we will write the according information into each object and storing on the hard disk.


Branch:
Key Structures: 
		String _head: Stores the Commit ID of the current.

		Hashmap _allBranch: Stores the <branch-Name, Commit ID>, which put the new set after every new branch.

Logic: 	Set the _head to every last commit ID by default, unleash there is a new branch. If so, copy the _head commit ID and store it 			in the _allBranch. The _head still points to the original commit ID unless a "check out" command was called. If so, then generate 		the next commit bases on the check out branch.

Check out:
Key:		
		Basically manipulates the _head pointers form the _allBranch. The programs switch to the given commit ID, using the method getHead(). Then retrieve the according files/branch according to the commit ID.

Merge:
		Basically manipulate two different head of these branches and the split point commit based on how difference are the files inside these commits.  